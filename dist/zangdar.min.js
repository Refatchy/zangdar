!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){e.exports=r(1)},function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(this,"$form",null),n(this,"_$prevButtons",null),n(this,"_steps",[]),n(this,"_currentIndex",null),n(this,"_params",{step_selector:"[data-step]",prev_step_selector:"[data-prev]",next_step_selector:"[data-next]",submit_selector:'[type="submit"]',active_step_index:0,classes:{form:"zandgar__wizard",prev_button:"zandgar__prev",next_button:"zandgar__next",step:"zandgar__step",step_active:"zandgar__step__active"},onSubmit:function(e){return e.preventDefault(),console.log(e),!1},onValidation:function(e,t,r){console.log("On step validation",e,t)},onStepChange:function(e,t,r){console.log("On step change",e,t)},customValidation:null}),this.$form=t instanceof HTMLFormElement?t:document.querySelector(t),this.$form.constructor!==HTMLFormElement)throw new Error("[Err] Zangdar.constructor - the container must be a valid HTML form element");this._params=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},s=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),s.forEach(function(t){n(e,t,r[t])})}return e}({},this._params,r),this._init()}var t,s,a;return t=e,(s=[{key:"goTo",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._currentIndex;return this._steps[e]||null}},{key:"goToStep",value:function(e){throw this._steps.findIndex(function(t){return t.label===e})>=0&&this._revealStep(),new Error('[Err] Zangdar.goToStep - step "'.concat(e,'" not found'))}},{key:"createFromTemplate",value:function(e){var t=this,r=0;for(var n in e)++r,e.hasOwnProperty(n)&&function(){var s=e[n],a=t._buildSection(n);if(s.forEach(function(e){var r=t.$form.querySelector(e);if(null!==r){var n=r.cloneNode(!0);a.appendChild(n),r.parentNode.removeChild(r)}}),r<Object.keys(e).length&&null===a.querySelector(t._params.next_step_selector)){var o=document.createElement("button");o.setAttribute(t._params.next_step_selector.replace(/\[|\]/gi,""),""),o.innerText="Next",a.appendChild(o)}if(r===Object.keys(e).length){var i=t.$form.querySelector(t._params.submit_selector);if(null!==i){var u=i.cloneNode(!0);a.appendChild(u),i.parentNode.removeChild(i)}}t.$form.appendChild(a)}();this._init()}},{key:"getCurrentStep",value:function(){return this.goTo()}},{key:"_init",value:function(){this.$form.querySelectorAll(this._params.step_selector).length&&(this._buildForm(),this._buildPrevButton(),this._buildSteps())}},{key:"_buildForm",value:function(){var e=this,t=this._params.onSubmit;this.$form.classList.add(this._params.classes.form),this.$form.addEventListener("submit",function(r){e._validateCurrentStep()&&(t&&t.constructor===Function?t(r):r.target.submit())})}},{key:"_buildPrevButton",value:function(){var e=this;if(this._$prevButtons=this.$form.querySelectorAll(this._params.prev_step_selector),this._$prevButtons&&this._$prevButtons.length)Array.from(this._$prevButtons).forEach(function(t){t.classList.add(e._params.classes.prev_button),t.addEventListener("click",function(t){t.preventDefault(),e._prevStep()})});else{var t=document.createElement("button");t.setAttribute("data-prev",""),t.innerText="Prev.",this.$form.insertBefore(t,this.$form.firstChild),this._buildPrevButton()}}},{key:"_buildSteps",value:function(){var e=this,t=Array.from(this.$form.querySelectorAll(this._params.step_selector));if(!t.length)throw new Error('[Err] Zangdar._buildSteps - you must have at least one step (a HTML element with "'.concat(this._params.step_selector,'" attribute)'));t.reduce(function(r,n,s){var a=n.dataset.step;if(n.classList.add(e._params.classes.step),s===e._params.active_step_index&&(n.classList.add(e._params.classes.step_active),e._currentIndex=s),s<t.length-1&&!n.querySelector(e._params.next_step_selector))throw new Error('[Err] Zangdar._buildSteps - step "'.concat(a,'" - you must have a next button (with "').concat(e._params.next_step_selector,'" attribute") on this step'));if(s<t.length-1&&n.querySelector(e._params.next_step_selector)){var o=n.querySelector(e._params.next_step_selector);o.classList.add(e._params.classes.next_button),o.addEventListener("click",function(t){t.preventDefault(),e._validateCurrentStep()&&e._nextStep()})}return r.push({el:n,label:a,active:!1,errors:{}}),r},this._steps),this._currentIndex=this._params.active_step_index,this._revealStep()}},{key:"_buildSection",value:function(e){var t=document.createElement("section");return t.setAttribute(this._params.step_selector.replace(/\[|\]/gi,""),e),t}},{key:"_revealStep",value:function(){var e=this;this._steps.forEach(function(t,r){t.active=e._currentIndex===r,t.active?t.el.classList.add(e._params.classes.step_active):t.el.classList.remove(e._params.classes.step_active)}),this._hidePrevBtns()}},{key:"_hidePrevBtns",value:function(){var e=this;this._$prevButtons&&this._$prevButtons.length?Array.from(this._$prevButtons).forEach(function(t){return t.style.display=0===e._currentIndex?"none":""}):this._buildPrevButton()}},{key:"_prevStep",value:function(){var e=this.getCurrentStep();this._currentIndex=this._currentIndex-1<0?0:this._currentIndex-1,this._params.onStepChange(this.getCurrentStep(),e,this.$form),this._revealStep()}},{key:"_nextStep",value:function(){var e=this.getCurrentStep();this._currentIndex=this._currentIndex<this._steps.length-1?this._currentIndex+1:this._steps.length,this._params.onStepChange(this.getCurrentStep(),e,this.$form),this._revealStep()}},{key:"_validateCurrentStep",value:function(){var e=this._steps[this._currentIndex],t=this._formElements(e.el);if(this._params.customValidation&&this._params.customValidation.constructor===Function)return this.$form.setAttribute("novalidate",""),this._params.customValidation(e,t,this.$form);this.$form.removeAttribute("novalidate"),e.errors={};var r=!0;return Array.from(t).reverse().forEach(function(t){t.checkValidity()||(r=!1,e.errors[t.name]||(e.errors[t.name]=[]),e.errors[t.name].push(t.validationMessage),t.reportValidity())}),this._params.onValidation(e,t,this.$form),r}},{key:"_formElements",value:function(e){return e.querySelectorAll("            ".concat(this._params.step_selector,' input:not([type="hidden"]):not([disabled]),            ').concat(this._params.step_selector," select:not([disabled]),            ").concat(this._params.step_selector," textarea:not([disabled])        "))}}])&&r(t.prototype,s),a&&r(t,a),e}();void 0!==window?(!window.hasOwnProperty("Zangdar")&&(window.Zangdar=s),HTMLFormElement.prototype.zangdar||(HTMLFormElement.prototype.zangdar=function(e){return new s(this,e)})):e.exports=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,