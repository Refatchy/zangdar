!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){e.exports=r(1)},function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(this,"$form",null),n(this,"_$prevButtons",null),n(this,"_steps",[]),n(this,"_currentIndex",null),n(this,"_params",{step_selector:"[data-step]",prev_step_selector:"[data-prev]",next_step_selector:"[data-next]",submit_selector:'[type="submit"]',active_step_index:0,classes:{form:"zandgar__wizard",prev_button:"zandgar__prev",next_button:"zandgar__next",step:"zandgar__step",step_active:"zandgar__step__active"},onSubmit:null,onStepChange:null,onValidation:null,customValidation:null}),this.$form=t instanceof HTMLFormElement?t:document.querySelector(t),this.$form.constructor!==HTMLFormElement)throw new Error("[Err] Zangdar.constructor - the container must be a valid HTML form element");this._params=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},s=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),s.forEach(function(t){n(e,t,r[t])})}return e}({},this._params,r),this._init()}var t,s,a;return t=e,(s=[{key:"goTo",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._currentIndex;return this._steps[e]||null}},{key:"goToStep",value:function(e){throw this._steps.findIndex(function(t){return t.label===e})>=0&&this._revealStep(),new Error('[Err] Zangdar.goToStep - step "'.concat(e,'" not found'))}},{key:"createFromTemplate",value:function(e){var t=this,r=0;for(var n in e)++r,e.hasOwnProperty(n)&&function(){var s=e[n],a=t._buildSection(n);if(s.forEach(function(e){var r=t.$form.querySelector(e);if(null!==r){var n=r.cloneNode(!0);a.appendChild(n),r.parentNode.removeChild(r)}}),r<Object.keys(e).length&&null===a.querySelector(t._params.next_step_selector)){var i=document.createElement("button");i.setAttribute(t._params.next_step_selector.replace(/\[|\]/gi,""),""),i.innerText="Next",a.appendChild(i)}if(r===Object.keys(e).length){var o=t.$form.querySelector(t._params.submit_selector);if(null!==o){var u=o.cloneNode(!0);a.appendChild(u),o.parentNode.removeChild(o)}}t.$form.appendChild(a)}();this._init()}},{key:"getCurrentStep",value:function(){return this.goTo()}},{key:"_init",value:function(){this.$form.querySelectorAll(this._params.step_selector).length&&(this._buildForm(),this._buildPrevButton(),this._buildSteps())}},{key:"_buildForm",value:function(){var e=this,t=this._params.onSubmit;this.$form.classList.add(this._params.classes.form),this.$form.addEventListener("submit",function(r){e._validateCurrentStep()&&(t&&t.constructor===Function?t(r):r.target.submit())})}},{key:"_buildPrevButton",value:function(){var e=this;if(this._$prevButtons=this.$form.querySelectorAll(this._params.prev_step_selector),this._$prevButtons&&this._$prevButtons.length)Array.from(this._$prevButtons).forEach(function(t){t.classList.add(e._params.classes.prev_button),t.addEventListener("click",function(t){t.preventDefault(),e._prevStep()})});else{var t=document.createElement("button");t.setAttribute("data-prev",""),t.innerText="Prev.",this.$form.insertBefore(t,this.$form.firstChild),this._buildPrevButton()}}},{key:"_buildSteps",value:function(){var e=this,t=Array.from(this.$form.querySelectorAll(this._params.step_selector));if(!t.length)throw new Error('[Err] Zangdar._buildSteps - you must have at least one step (a HTML element with "'.concat(this._params.step_selector,'" attribute)'));t.reduce(function(r,n,s){var a=n.dataset.step;if(n.classList.add(e._params.classes.step),s===e._params.active_step_index&&(n.classList.add(e._params.classes.step_active),e._currentIndex=s),s<t.length-1&&!n.querySelector(e._params.next_step_selector))throw new Error('[Err] Zangdar._buildSteps - step "'.concat(a,'" - you must have a next button (with "').concat(e._params.next_step_selector,'" attribute") on this step'));if(s<t.length-1&&n.querySelector(e._params.next_step_selector)){var i=n.querySelector(e._params.next_step_selector);i.classList.add(e._params.classes.next_button),i.addEventListener("click",function(t){t.preventDefault(),e._validateCurrentStep()&&e._nextStep()})}return r.push({el:n,label:a,active:!1,errors:{}}),r},this._steps),this._currentIndex=this._params.active_step_index,this._revealStep()}},{key:"_buildSection",value:function(e){var t=document.createElement("section");return t.setAttribute(this._params.step_selector.replace(/\[|\]/gi,""),e),t}},{key:"_revealStep",value:function(){var e=this;this._steps.forEach(function(t,r){t.active=e._currentIndex===r,t.active?t.el.classList.add(e._params.classes.step_active):t.el.classList.remove(e._params.classes.step_active)}),this._hidePrevBtns()}},{key:"_hidePrevBtns",value:function(){var e=this;this._$prevButtons&&this._$prevButtons.length?Array.from(this._$prevButtons).forEach(function(t){return t.style.display=0===e._currentIndex?"none":""}):this._buildPrevButton()}},{key:"_prevStep",value:function(){var e=this.getCurrentStep();this._currentIndex=this._currentIndex-1<0?0:this._currentIndex-1,this._params.onStepChange(this.getCurrentStep(),e,-1,this.$form),this._revealStep()}},{key:"_nextStep",value:function(){var e=this.getCurrentStep();this._currentIndex=this._currentIndex<this._steps.length-1?this._currentIndex+1:this._steps.length,this._params.onStepChange(this.getCurrentStep(),e,1,this.$form),this._revealStep()}},{key:"_validateCurrentStep",value:function(){var e=this._steps[this._currentIndex],t=this._formElements(e.el);if(this._params.customValidation&&this._params.customValidation.constructor===Function)return this.$form.setAttribute("novalidate",""),this._params.customValidation(e,t,this.$form);this.$form.removeAttribute("novalidate"),e.errors={};var r=!0;return Array.from(t).reverse().forEach(function(t){t.checkValidity()||(r=!1,e.errors[t.name]||(e.errors[t.name]=[]),e.errors[t.name].push(t.validationMessage),t.reportValidity())}),this._params.onValidation(e,t,this.$form),r}},{key:"_formElements",value:function(e){return e.querySelectorAll("            ".concat(this._params.step_selector,' input:not([type="hidden"]):not([disabled]),            ').concat(this._params.step_selector," select:not([disabled]),            ").concat(this._params.step_selector," textarea:not([disabled])        "))}}])&&r(t.prototype,s),a&&r(t,a),e}();void 0!==window?(!window.hasOwnProperty("Zangdar")&&(window.Zangdar=s),HTMLFormElement.prototype.zangdar||(HTMLFormElement.prototype.zangdar=function(e){return new s(this,e)})):e.exports=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiWmFuZ2RhciIsImVsZW1lbnQiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl9kZWZpbmVQcm9wZXJ0eSIsInN0ZXBfc2VsZWN0b3IiLCJwcmV2X3N0ZXBfc2VsZWN0b3IiLCJuZXh0X3N0ZXBfc2VsZWN0b3IiLCJzdWJtaXRfc2VsZWN0b3IiLCJhY3RpdmVfc3RlcF9pbmRleCIsImNsYXNzZXMiLCJmb3JtIiwicHJldl9idXR0b24iLCJuZXh0X2J1dHRvbiIsInN0ZXAiLCJzdGVwX2FjdGl2ZSIsIm9uU3VibWl0Iiwib25TdGVwQ2hhbmdlIiwib25WYWxpZGF0aW9uIiwiY3VzdG9tVmFsaWRhdGlvbiIsIiRmb3JtIiwiSFRNTEZvcm1FbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29uc3RydWN0b3IiLCJFcnJvciIsIl9wYXJhbXMiLCJfb2JqZWN0U3ByZWFkIiwiX2luaXQiLCJpbmRleCIsIl9jdXJyZW50SW5kZXgiLCJfc3RlcHMiLCJsYWJlbCIsImZpbmRJbmRleCIsIl9yZXZlYWxTdGVwIiwiY29uY2F0IiwidGVtcGxhdGUiLCJfdGhpcyIsImZpZWxkcyIsIiRzZWN0aW9uIiwiX2J1aWxkU2VjdGlvbiIsImZvckVhY2giLCJmaWVsZCIsImVsIiwibmV3RWxtIiwiY2xvbmVOb2RlIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJrZXlzIiwiJG5leHRCdXR0b24iLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwicmVwbGFjZSIsImlubmVyVGV4dCIsIiRzdWJtaXRCdXR0b24iLCJuZXdCdG4iLCJnb1RvIiwicXVlcnlTZWxlY3RvckFsbCIsIl9idWlsZEZvcm0iLCJfYnVpbGRQcmV2QnV0dG9uIiwiX2J1aWxkU3RlcHMiLCJfdGhpczIiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsIl92YWxpZGF0ZUN1cnJlbnRTdGVwIiwiRnVuY3Rpb24iLCJ0YXJnZXQiLCJzdWJtaXQiLCJfdGhpczMiLCJfJHByZXZCdXR0b25zIiwiQXJyYXkiLCJmcm9tIiwiYnRuIiwicHJldmVudERlZmF1bHQiLCJfcHJldlN0ZXAiLCIkcHJldkJ0biIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJfdGhpczQiLCJzdGVwcyIsInJlZHVjZSIsImFjYyIsIml0ZW0iLCJkYXRhc2V0IiwiX25leHRTdGVwIiwicHVzaCIsImFjdGl2ZSIsImVycm9ycyIsIl90aGlzNSIsInJlbW92ZSIsIl9oaWRlUHJldkJ0bnMiLCJfdGhpczYiLCJzdHlsZSIsImRpc3BsYXkiLCJvbGRTdGVwIiwiZ2V0Q3VycmVudFN0ZXAiLCJjdXJyZW50U3RlcCIsIl9mb3JtRWxlbWVudHMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpc1ZhbGlkIiwicmV2ZXJzZSIsImNoZWNrVmFsaWRpdHkiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsInJlcG9ydFZhbGlkaXR5Iiwid2luZG93IiwiemFuZ2RhciJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdB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QWE3RCxFQUFRbkMsS0FBS2lCLE9BRW5FakIsS0FBS2lCLE1BQU1pRixnQkFBZ0IsY0FDM0JGLEVBQVlULE9BQVMsR0FDckIsSUFBSVksR0FBVSxFQWNkLE9BYkE3QixNQUFNQyxLQUFLcEMsR0FDTmlFLFVBQ0E5RCxRQUFRLFNBQUFFLEdBQ0FBLEVBQUc2RCxrQkFDSkYsR0FBVSxFQUNMSCxFQUFZVCxPQUFPL0MsRUFBR3hFLFFBQ3ZCZ0ksRUFBWVQsT0FBTy9DLEVBQUd4RSxNQUFRLElBRWxDZ0ksRUFBWVQsT0FBTy9DLEVBQUd4RSxNQUFNcUgsS0FBSzdDLEVBQUc4RCxtQkFDcEM5RCxFQUFHK0Qsb0JBR2Z2RyxLQUFLdUIsUUFBUVIsYUFBYWlGLEVBQWE3RCxFQUFRbkMsS0FBS2lCLE9BQzdDa0Ysd0NBR0czRCxHQUNWLE9BQU9BLEVBQUdlLGlCQUFILGVBQUF2QixPQUNEaEMsS0FBS3VCLFFBQVFyQixjQURaLDREQUFBOEIsT0FFRGhDLEtBQUt1QixRQUFRckIsY0FGWix3Q0FBQThCLE9BR0RoQyxLQUFLdUIsUUFBUXJCLGNBSFosZ0ZBUUFKLElBQVgwRyxTQUNDQSxPQUFPbEgsZUFBZSxhQUFla0gsT0FBTy9HLFFBQVVBLEdBQ25EeUIsZ0JBQWdCN0IsVUFBVW9ILFVBQzFCdkYsZ0JBQWdCN0IsVUFBVW9ILFFBQVUsU0FBVTlHLEdBQzFDLE9BQU8sSUFBSUYsRUFBUU8sS0FBTUwsTUFJakNuQyxFQUFPRCxRQUFVa0MiLCJmaWxlIjoiemFuZ2Rhci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJjbGFzcyBaYW5nZGFyIHtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtIVE1MRm9ybUVsZW1lbnR9XG4gICAgICovXG4gICAgJGZvcm0gPSBudWxsXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEB0eXBlIHtOb2RlTGlzdE9mfG51bGx9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfJHByZXZCdXR0b25zID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc3RlcHMgPSBbXVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfG51bGx9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY3VycmVudEluZGV4ID0gbnVsbFxuXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEB0eXBlIHt7c3RlcF9zZWxlY3Rvcjogc3RyaW5nLCBwcmV2X3N0ZXBfc2VsZWN0b3I6IHN0cmluZywgb25TdGVwQ2hhbmdlKE9iamVjdCwgT2JqZWN0KTogdm9pZCwgYWN0aXZlX3N0ZXBfaW5kZXg6IG51bWJlciwgb25TdWJtaXQoRXZlbnQpOiBib29sZWFuLCBjbGFzc2VzOiB7cHJldl9idXR0b246IHN0cmluZywgbmV4dF9idXR0b246IHN0cmluZywgZm9ybTogc3RyaW5nLCBzdGVwOiBzdHJpbmcsIHN0ZXBfYWN0aXZlOiBzdHJpbmd9LCBuZXh0X3N0ZXBfc2VsZWN0b3I6IHN0cmluZywgY3VzdG9tVmFsaWRhdGlvbjogKGZ1bmN0aW9uKE9iamVjdCwgTm9kZUxpc3QpOiBib29sZWFuKSwgb25WYWxpZGF0aW9uKE9iamVjdCwgTm9kZUxpc3QpOiB2b2lkfX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wYXJhbXMgPSB7XG4gICAgICAgIHN0ZXBfc2VsZWN0b3I6ICdbZGF0YS1zdGVwXScsXG4gICAgICAgIHByZXZfc3RlcF9zZWxlY3RvcjogJ1tkYXRhLXByZXZdJyxcbiAgICAgICAgbmV4dF9zdGVwX3NlbGVjdG9yOiAnW2RhdGEtbmV4dF0nLFxuICAgICAgICBzdWJtaXRfc2VsZWN0b3I6ICdbdHlwZT1cInN1Ym1pdFwiXScsXG4gICAgICAgIGFjdGl2ZV9zdGVwX2luZGV4OiAwLFxuICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgICBmb3JtOiAnemFuZGdhcl9fd2l6YXJkJyxcbiAgICAgICAgICAgIHByZXZfYnV0dG9uOiAnemFuZGdhcl9fcHJldicsXG4gICAgICAgICAgICBuZXh0X2J1dHRvbjogJ3phbmRnYXJfX25leHQnLFxuICAgICAgICAgICAgc3RlcDogJ3phbmRnYXJfX3N0ZXAnLFxuICAgICAgICAgICAgc3RlcF9hY3RpdmU6ICd6YW5kZ2FyX19zdGVwX19hY3RpdmUnLFxuICAgICAgICB9LFxuICAgICAgICBvblN1Ym1pdDogbnVsbCxcbiAgICAgICAgb25TdGVwQ2hhbmdlOiBudWxsLFxuICAgICAgICBvblZhbGlkYXRpb246IG51bGwsXG4gICAgICAgIGN1c3RvbVZhbGlkYXRpb246IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0hUTUxGb3JtRWxlbWVudHxTdHJpbmd9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLiRmb3JtID0gZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudFxuICAgICAgICAgICAgPyBlbGVtZW50XG4gICAgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudClcblxuICAgICAgICBpZiAodGhpcy4kZm9ybS5jb25zdHJ1Y3RvciAhPT0gSFRNTEZvcm1FbGVtZW50KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbRXJyXSBaYW5nZGFyLmNvbnN0cnVjdG9yIC0gdGhlIGNvbnRhaW5lciBtdXN0IGJlIGEgdmFsaWQgSFRNTCBmb3JtIGVsZW1lbnRgKVxuXG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuX3BhcmFtcyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2luaXQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBzdGVwIGJ5IGhpcyBpbmRleFxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfVxuICAgICAqL1xuICAgIGdvVG8oaW5kZXggPSB0aGlzLl9jdXJyZW50SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0ZXBzW2luZGV4XSB8fCBudWxsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR28gdG8gYSBzdGVwIGJ5IGxhYmVsIChkYXRhLXN0ZXAgYXR0cmlidXRlIHZhbHVlKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGxhYmVsXG4gICAgICovXG4gICAgZ29Ub1N0ZXAobGFiZWwpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9zdGVwcy5maW5kSW5kZXgoc3RlcCA9PiBzdGVwLmxhYmVsID09PSBsYWJlbClcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3JldmVhbFN0ZXAoKVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW0Vycl0gWmFuZ2Rhci5nb1RvU3RlcCAtIHN0ZXAgXCIke2xhYmVsfVwiIG5vdCBmb3VuZGApXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgd2l6YXJkIGZyb20gYW4gZXhpc3RpbmcgZm9ybSB3aXRoIGEgdGVtcGxhdGUgd2hpY2ggaXMgZGVzY3JpYmVzIGl0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGUgdGhlIHdpemFyZCB0ZW1wbGF0ZVxuICAgICAqL1xuICAgIGNyZWF0ZUZyb21UZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgICBsZXQgaSA9IDBcbiAgICAgICAgZm9yIChsZXQgbGFiZWwgaW4gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgICsraVxuICAgICAgICAgICAgaWYgKHRlbXBsYXRlLmhhc093blByb3BlcnR5KGxhYmVsKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHRlbXBsYXRlW2xhYmVsXVxuICAgICAgICAgICAgICAgIGNvbnN0ICRzZWN0aW9uID0gdGhpcy5fYnVpbGRTZWN0aW9uKGxhYmVsKVxuICAgICAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3IoZmllbGQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RWxtID0gZWwuY2xvbmVOb2RlKHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2VjdGlvbi5hcHBlbmRDaGlsZChuZXdFbG0pXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZiAoaSA8IE9iamVjdC5rZXlzKHRlbXBsYXRlKS5sZW5ndGggJiYgJHNlY3Rpb24ucXVlcnlTZWxlY3Rvcih0aGlzLl9wYXJhbXMubmV4dF9zdGVwX3NlbGVjdG9yKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCAkbmV4dEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgICRuZXh0QnV0dG9uLnNldEF0dHJpYnV0ZSh0aGlzLl9wYXJhbXMubmV4dF9zdGVwX3NlbGVjdG9yLnJlcGxhY2UoL1xcW3xcXF0vaWcsICcnKSwgJycpXG4gICAgICAgICAgICAgICAgICAgICRuZXh0QnV0dG9uLmlubmVyVGV4dCA9ICdOZXh0J1xuICAgICAgICAgICAgICAgICAgICAkc2VjdGlvbi5hcHBlbmRDaGlsZCgkbmV4dEJ1dHRvbilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IE9iamVjdC5rZXlzKHRlbXBsYXRlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgJHN1Ym1pdEJ1dHRvbiA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9wYXJhbXMuc3VibWl0X3NlbGVjdG9yKVxuICAgICAgICAgICAgICAgICAgICBpZiAoJHN1Ym1pdEJ1dHRvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3QnRuID0gJHN1Ym1pdEJ1dHRvbi5jbG9uZU5vZGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICRzZWN0aW9uLmFwcGVuZENoaWxkKG5ld0J0bilcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdWJtaXRCdXR0b24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCgkc3VibWl0QnV0dG9uKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uYXBwZW5kQ2hpbGQoJHNlY3Rpb24pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5pdCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHN0ZXBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gdGhlIGN1cnJlbnQgc3RlcCBpZiBleGlzdHMsIG51bGwgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgZ2V0Q3VycmVudFN0ZXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdvVG8oKVxuICAgIH1cblxuICAgIF9pbml0KCkge1xuICAgICAgICBpZiAodGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3BhcmFtcy5zdGVwX3NlbGVjdG9yKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkRm9ybSgpXG4gICAgICAgICAgICB0aGlzLl9idWlsZFByZXZCdXR0b24oKVxuICAgICAgICAgICAgdGhpcy5fYnVpbGRTdGVwcygpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYnVpbGRGb3JtKCkge1xuICAgICAgICBjb25zdCBvblN1Ym1pdCA9IHRoaXMuX3BhcmFtcy5vblN1Ym1pdFxuICAgICAgICB0aGlzLiRmb3JtLmNsYXNzTGlzdC5hZGQodGhpcy5fcGFyYW1zLmNsYXNzZXMuZm9ybSlcbiAgICAgICAgdGhpcy4kZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBlID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWxpZGF0ZUN1cnJlbnRTdGVwKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAob25TdWJtaXQgJiYgb25TdWJtaXQuY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgICBvblN1Ym1pdChlKVxuICAgICAgICAgICAgICAgIGVsc2UgZS50YXJnZXQuc3VibWl0KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9idWlsZFByZXZCdXR0b24oKSB7XG4gICAgICAgIHRoaXMuXyRwcmV2QnV0dG9ucyA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9wYXJhbXMucHJldl9zdGVwX3NlbGVjdG9yKVxuXG4gICAgICAgIGlmICghdGhpcy5fJHByZXZCdXR0b25zIHx8ICF0aGlzLl8kcHJldkJ1dHRvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCAkcHJldkJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgICAgICAgICAkcHJldkJ0bi5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJldicsICcnKVxuICAgICAgICAgICAgJHByZXZCdG4uaW5uZXJUZXh0ID0gJ1ByZXYuJ1xuICAgICAgICAgICAgdGhpcy4kZm9ybS5pbnNlcnRCZWZvcmUoJHByZXZCdG4sIHRoaXMuJGZvcm0uZmlyc3RDaGlsZClcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkUHJldkJ1dHRvbigpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBBcnJheS5mcm9tKHRoaXMuXyRwcmV2QnV0dG9ucykuZm9yRWFjaChidG4gPT4ge1xuICAgICAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKHRoaXMuX3BhcmFtcy5jbGFzc2VzLnByZXZfYnV0dG9uKVxuICAgICAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldlN0ZXAoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYnVpbGRTdGVwcygpIHtcbiAgICAgICAgbGV0IHN0ZXBzID0gQXJyYXkuZnJvbSh0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fcGFyYW1zLnN0ZXBfc2VsZWN0b3IpKVxuXG4gICAgICAgIGlmICghc3RlcHMubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbRXJyXSBaYW5nZGFyLl9idWlsZFN0ZXBzIC0geW91IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgc3RlcCAoYSBIVE1MIGVsZW1lbnQgd2l0aCBcIiR7dGhpcy5fcGFyYW1zLnN0ZXBfc2VsZWN0b3J9XCIgYXR0cmlidXRlKWApXG5cbiAgICAgICAgc3RlcHMucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGVwID0gaXRlbS5kYXRhc2V0LnN0ZXBcbiAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCh0aGlzLl9wYXJhbXMuY2xhc3Nlcy5zdGVwKVxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLl9wYXJhbXMuYWN0aXZlX3N0ZXBfaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQodGhpcy5fcGFyYW1zLmNsYXNzZXMuc3RlcF9hY3RpdmUpXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4ID0gaW5kZXhcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4IDwgc3RlcHMubGVuZ3RoIC0gMSAmJiAhaXRlbS5xdWVyeVNlbGVjdG9yKHRoaXMuX3BhcmFtcy5uZXh0X3N0ZXBfc2VsZWN0b3IpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW0Vycl0gWmFuZ2Rhci5fYnVpbGRTdGVwcyAtIHN0ZXAgXCIke3N0ZXB9XCIgLSB5b3UgbXVzdCBoYXZlIGEgbmV4dCBidXR0b24gKHdpdGggXCIke3RoaXMuX3BhcmFtcy5uZXh0X3N0ZXBfc2VsZWN0b3J9XCIgYXR0cmlidXRlXCIpIG9uIHRoaXMgc3RlcGApXG5cbiAgICAgICAgICAgIGlmIChpbmRleCA8IHN0ZXBzLmxlbmd0aCAtIDEgJiYgaXRlbS5xdWVyeVNlbGVjdG9yKHRoaXMuX3BhcmFtcy5uZXh0X3N0ZXBfc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgJG5leHRCdXR0b24gPSBpdGVtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fcGFyYW1zLm5leHRfc3RlcF9zZWxlY3RvcilcblxuICAgICAgICAgICAgICAgICRuZXh0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5fcGFyYW1zLmNsYXNzZXMubmV4dF9idXR0b24pXG4gICAgICAgICAgICAgICAgJG5leHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl92YWxpZGF0ZUN1cnJlbnRTdGVwKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0U3RlcCgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWNjLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsOiBpdGVtLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBzdGVwLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3JzOiB7fVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgfSwgdGhpcy5fc3RlcHMpXG5cbiAgICAgICAgdGhpcy5fY3VycmVudEluZGV4ID0gdGhpcy5fcGFyYW1zLmFjdGl2ZV9zdGVwX2luZGV4XG4gICAgICAgIHRoaXMuX3JldmVhbFN0ZXAoKVxuICAgIH1cblxuICAgIF9idWlsZFNlY3Rpb24obGFiZWwpIHtcbiAgICAgICAgY29uc3QgJHNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJylcbiAgICAgICAgJHNlY3Rpb24uc2V0QXR0cmlidXRlKHRoaXMuX3BhcmFtcy5zdGVwX3NlbGVjdG9yLnJlcGxhY2UoL1xcW3xcXF0vaWcsICcnKSwgbGFiZWwpXG4gICAgICAgIHJldHVybiAkc2VjdGlvblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JldmVhbFN0ZXAoKSB7XG4gICAgICAgIHRoaXMuX3N0ZXBzLmZvckVhY2goKHN0ZXAsIGkpID0+IHtcbiAgICAgICAgICAgIHN0ZXAuYWN0aXZlID0gdGhpcy5fY3VycmVudEluZGV4ID09PSBpXG4gICAgICAgICAgICBpZiAoc3RlcC5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBzdGVwLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5fcGFyYW1zLmNsYXNzZXMuc3RlcF9hY3RpdmUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0ZXAuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9wYXJhbXMuY2xhc3Nlcy5zdGVwX2FjdGl2ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5faGlkZVByZXZCdG5zKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9oaWRlUHJldkJ0bnMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fJHByZXZCdXR0b25zIHx8ICF0aGlzLl8kcHJldkJ1dHRvbnMubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5fYnVpbGRQcmV2QnV0dG9uKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLl8kcHJldkJ1dHRvbnMpLmZvckVhY2goYnRuID0+IGJ0bi5zdHlsZS5kaXNwbGF5ID0gdGhpcy5fY3VycmVudEluZGV4ID09PSAwID8gJ25vbmUnIDogJycpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcHJldlN0ZXAoKSB7XG4gICAgICAgIGNvbnN0IG9sZFN0ZXAgPSB0aGlzLmdldEN1cnJlbnRTdGVwKClcbiAgICAgICAgdGhpcy5fY3VycmVudEluZGV4ID0gdGhpcy5fY3VycmVudEluZGV4IC0gMSA8IDAgPyAwIDogdGhpcy5fY3VycmVudEluZGV4IC0gMVxuICAgICAgICB0aGlzLl9wYXJhbXMub25TdGVwQ2hhbmdlKHRoaXMuZ2V0Q3VycmVudFN0ZXAoKSwgb2xkU3RlcCwgLTEsIHRoaXMuJGZvcm0pXG4gICAgICAgIHRoaXMuX3JldmVhbFN0ZXAoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX25leHRTdGVwKCkge1xuICAgICAgICBjb25zdCBvbGRTdGVwID0gdGhpcy5nZXRDdXJyZW50U3RlcCgpXG4gICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCA9IHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX3N0ZXBzLmxlbmd0aCAtIDFcbiAgICAgICAgICAgID8gdGhpcy5fY3VycmVudEluZGV4ICsgMVxuICAgICAgICAgICAgOiB0aGlzLl9zdGVwcy5sZW5ndGhcbiAgICAgICAgdGhpcy5fcGFyYW1zLm9uU3RlcENoYW5nZSh0aGlzLmdldEN1cnJlbnRTdGVwKCksIG9sZFN0ZXAsIDEsIHRoaXMuJGZvcm0pXG4gICAgICAgIHRoaXMuX3JldmVhbFN0ZXAoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3ZhbGlkYXRlQ3VycmVudFN0ZXAoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGVwID0gdGhpcy5fc3RlcHNbdGhpcy5fY3VycmVudEluZGV4XVxuICAgICAgICBjb25zdCBmaWVsZHMgPSB0aGlzLl9mb3JtRWxlbWVudHMoY3VycmVudFN0ZXAuZWwpXG4gICAgICAgIGlmICh0aGlzLl9wYXJhbXMuY3VzdG9tVmFsaWRhdGlvbiAmJiB0aGlzLl9wYXJhbXMuY3VzdG9tVmFsaWRhdGlvbi5jb25zdHJ1Y3RvciA9PT0gRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuJGZvcm0uc2V0QXR0cmlidXRlKCdub3ZhbGlkYXRlJywgJycpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW1zLmN1c3RvbVZhbGlkYXRpb24oY3VycmVudFN0ZXAsIGZpZWxkcywgdGhpcy4kZm9ybSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRmb3JtLnJlbW92ZUF0dHJpYnV0ZSgnbm92YWxpZGF0ZScpXG4gICAgICAgIGN1cnJlbnRTdGVwLmVycm9ycyA9IHt9XG4gICAgICAgIGxldCBpc1ZhbGlkID0gdHJ1ZVxuICAgICAgICBBcnJheS5mcm9tKGZpZWxkcylcbiAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgIC5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVsLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50U3RlcC5lcnJvcnNbZWwubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwLmVycm9yc1tlbC5uYW1lXSA9IFtdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0ZXAuZXJyb3JzW2VsLm5hbWVdLnB1c2goZWwudmFsaWRhdGlvbk1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgIGVsLnJlcG9ydFZhbGlkaXR5KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB0aGlzLl9wYXJhbXMub25WYWxpZGF0aW9uKGN1cnJlbnRTdGVwLCBmaWVsZHMsIHRoaXMuJGZvcm0pXG4gICAgICAgIHJldHVybiBpc1ZhbGlkXG4gICAgfVxuXG4gICAgX2Zvcm1FbGVtZW50cyhlbCkge1xuICAgICAgICByZXR1cm4gZWwucXVlcnlTZWxlY3RvckFsbChgXFxcbiAgICAgICAgICAgICR7dGhpcy5fcGFyYW1zLnN0ZXBfc2VsZWN0b3J9IGlucHV0Om5vdChbdHlwZT1cImhpZGRlblwiXSk6bm90KFtkaXNhYmxlZF0pLFxcXG4gICAgICAgICAgICAke3RoaXMuX3BhcmFtcy5zdGVwX3NlbGVjdG9yfSBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLFxcXG4gICAgICAgICAgICAke3RoaXMuX3BhcmFtcy5zdGVwX3NlbGVjdG9yfSB0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSlcXFxuICAgICAgICBgKVxuICAgIH1cbn1cblxuaWYgKHdpbmRvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgIXdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnWmFuZ2RhcicpICYmICh3aW5kb3cuWmFuZ2RhciA9IFphbmdkYXIpXG4gICAgaWYoIUhUTUxGb3JtRWxlbWVudC5wcm90b3R5cGUuemFuZ2Rhcikge1xuICAgICAgICBIVE1MRm9ybUVsZW1lbnQucHJvdG90eXBlLnphbmdkYXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBaYW5nZGFyKHRoaXMsIG9wdGlvbnMpXG4gICAgICAgIH1cbiAgICB9XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gWmFuZ2RhclxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==