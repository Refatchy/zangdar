!function(t){var e={};function r(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){t.exports=r(1)},function(t,e){function r(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),n(this,"$form",null),n(this,"_$prevButton",null),n(this,"_steps",[]),n(this,"_currentIndex",null),n(this,"_params",{step_selector:"[data-step]",prev_step_selector:"[data-prev]",next_step_selector:"[data-next]",submit_selector:'[type="submit"]',active_step_index:0,classes:{form:"zandgar__wizard",prev_button:"zandgar__prev",next_button:"zandgar__next",step:"zandgar__step",step_active:"zandgar__step__active"},onSubmit:function(t){return t.preventDefault(),console.log(t),!1},onValidation:function(t,e,r){console.log("On step validation",t,e)},onStepChange:function(t,e,r){console.log("On step change",t,e)},customValidation:null}),this.$form=e instanceof HTMLFormElement?e:document.querySelector(e),this.$form.constructor!==HTMLFormElement)throw new Error("[Err] Zangdar.constructor - the container must be a valid HTML form element");this._params=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},s=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),s.forEach(function(e){n(t,e,r[e])})}return t}({},this._params,r),this._init()}var e,s,a;return e=t,(s=[{key:"goTo",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._currentIndex;return this._steps[t]||null}},{key:"goToStep",value:function(t){throw this._steps.findIndex(function(e){return e.label===t})>=0&&this._revealStep(),new Error('[Err] Zangdar.goToStep - step "'.concat(t,'" not found'))}},{key:"createFromTemplate",value:function(t){var e=this,r=0;for(var n in t)++r,t.hasOwnProperty(n)&&function(){var s=t[n],a=e._buildSection(n);if(s.forEach(function(t){var r=e.$form.querySelector(t);if(null!==r){var n=r.cloneNode(!0);a.appendChild(n),r.parentNode.removeChild(r)}}),r<Object.keys(t).length&&null===a.querySelector(e._params.next_step_selector)){var o=document.createElement("button");o.setAttribute(e._params.next_step_selector.replace(/\[|\]/gi,""),""),o.innerText="Next",a.appendChild(o)}if(r===Object.keys(t).length){var i=e.$form.querySelector(e._params.submit_selector);if(null!==i){var u=i.cloneNode(!0);a.appendChild(u),i.parentNode.removeChild(i)}}e.$form.appendChild(a)}();this._init()}},{key:"getCurrentStep",value:function(){return this.goTo()}},{key:"_init",value:function(){this.$form.querySelectorAll(this._params.step_selector).length&&(this._buildForm(),this._buildPrevButton(),this._buildSteps())}},{key:"_buildForm",value:function(){var t=this,e=this._params.onSubmit;this.$form.classList.add(this._params.classes.form),this.$form.addEventListener("submit",function(r){t._validateCurrentStep()&&(e&&e.constructor===Function?e(r):r.target.submit())})}},{key:"_buildPrevButton",value:function(){var t=this;this._$prevButton=this.$form.querySelector(this._params.prev_step_selector),null===this._$prevButton&&(this._$prevButton=document.createElement("button"),this._$prevButton.setAttribute("data-prev",""),this._$prevButton.innerText="Prev.",this.$form.insertBefore(this._$prevButton,this.$form.firstChild)),this._$prevButton.classList.add(this._params.classes.prev_button),this._$prevButton.addEventListener("click",function(e){e.preventDefault(),t._prevStep()})}},{key:"_buildSteps",value:function(){var t=this,e=Array.from(this.$form.querySelectorAll(this._params.step_selector));if(!e.length)throw new Error('[Err] Zangdar._buildSteps - you must have at least one step (a HTML element with "'.concat(this._params.step_selector,'" attribute)'));e.reduce(function(r,n,s){var a=n.dataset.step;if(n.classList.add(t._params.classes.step),s===t._params.active_step_index&&(n.classList.add(t._params.classes.step_active),t._currentIndex=s),s<e.length-1&&!n.querySelector(t._params.next_step_selector))throw new Error('[Err] Zangdar._buildSteps - step "'.concat(a,'" - you must have a next button (with "').concat(t._params.next_step_selector,'" attribute") on this step'));if(s<e.length-1&&n.querySelector(t._params.next_step_selector)){var o=n.querySelector(t._params.next_step_selector);o.classList.add(t._params.classes.next_button),o.addEventListener("click",function(e){e.preventDefault(),t._validateCurrentStep()&&t._nextStep()})}return r.push({el:n,label:a,active:!1,errors:{}}),r},this._steps),this._currentIndex=this._params.active_step_index,this._revealStep()}},{key:"_buildSection",value:function(t){var e=document.createElement("section");return e.setAttribute(this._params.step_selector.replace(/\[|\]/gi,""),t),e}},{key:"_revealStep",value:function(){var t=this;this._steps.forEach(function(e,r){e.active=t._currentIndex===r,e.active?e.el.classList.add(t._params.classes.step_active):e.el.classList.remove(t._params.classes.step_active)}),this._$prevButton.style.display=0===this._currentIndex?"none":""}},{key:"_prevStep",value:function(){var t=this.getCurrentStep();this._currentIndex=this._currentIndex-1<0?0:this._currentIndex-1,this._params.onStepChange(this.getCurrentStep(),t,this.$form),this._revealStep()}},{key:"_nextStep",value:function(){var t=this.getCurrentStep();this._currentIndex=this._currentIndex<this._steps.length-1?this._currentIndex+1:this._steps.length,this._params.onStepChange(this.getCurrentStep(),t,this.$form),this._revealStep()}},{key:"_validateCurrentStep",value:function(){var t=this._steps[this._currentIndex],e=this._formElements(t.el);if(this._params.customValidation&&this._params.customValidation.constructor===Function)return this.$form.setAttribute("novalidate",""),this._params.customValidation(t,e,this.$form);this.$form.removeAttribute("novalidate"),t.errors={};var r=!0;return Array.from(e).reverse().forEach(function(e){e.checkValidity()||(r=!1,t.errors[e.name]||(t.errors[e.name]=[]),t.errors[e.name].push(e.validationMessage),e.reportValidity())}),this._params.onValidation(t,e,this.$form),r}},{key:"_formElements",value:function(t){return t.querySelectorAll("            ".concat(this._params.step_selector,' input:not([type="hidden"]):not([disabled]),            ').concat(this._params.step_selector," select:not([disabled]),            ").concat(this._params.step_selector," textarea:not([disabled])        "))}}])&&r(e.prototype,s),a&&r(e,a),t}();void 0!==window?(!window.hasOwnProperty("Zangdar")&&(window.Zangdar=s),HTMLFormElement.prototype.zangdar||(HTMLFormElement.prototype.zangdar=function(t){return new s(this,t)})):t.exports=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,